@baseUrl = http://localhost:8080
@contentType = application/json

### ============================================
### 第 1 步：登录获取 Token
### ============================================
# @name login
POST {{baseUrl}}/api/v1/login
Content-Type: {{contentType}}

{
  "email": "john.doe@example.com",
  "password": "123456"
}

### ============================================
### 第 2 步：使用 Token 进行购物车结账
### ============================================
### 📌 请先执行上面的登录请求，然后：
### 1. 查看返回的 JSON 中的 "token" 字段
### 2. 复制整个 token 值（很长的一串字符）
### 3. 替换下面第 28 行的 YOUR_TOKEN_HERE

@token = YOUR_TOKEN_HERE

POST {{baseUrl}}/api/v1/cart/checkout
Content-Type: {{contentType}}
Authorization: Bearer {{token}}

{
  "items": [
    {
      "productId": 1,
      "quantity": 2
    },
    {
      "productId": 2,
      "quantity": 1
    }
  ]
}

### ============================================
### 第 3 步：测试各种错误情况
### ============================================

### 3.1 测试产品不存在
POST {{baseUrl}}/api/v1/cart/checkout
Content-Type: {{contentType}}
Authorization: Bearer {{token}}

{
  "items": [
    {
      "productId": 999,
      "quantity": 1
    }
  ]
}

### 3.2 测试数量为 0（应该验证失败）
POST {{baseUrl}}/api/v1/cart/checkout
Content-Type: {{contentType}}
Authorization: Bearer {{token}}

{
  "items": [
    {
      "productId": 1,
      "quantity": 0
    }
  ]
}

### 3.3 测试没有 token（应该返回 403）
POST {{baseUrl}}/api/v1/cart/checkout
Content-Type: {{contentType}}

{
  "items": [
    {
      "productId": 1,
      "quantity": 1
    }
  ]
}

### 3.4 测试库存不足
POST {{baseUrl}}/api/v1/cart/checkout
Content-Type: {{contentType}}
Authorization: Bearer {{token}}

{
  "items": [
    {
      "productId": 1,
      "quantity": 1000
    }
  ]
}

### 3.5 测试空购物车
POST {{baseUrl}}/api/v1/cart/checkout
Content-Type: {{contentType}}
Authorization: Bearer {{token}}

{
  "items": []
}
